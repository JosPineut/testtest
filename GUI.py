#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.20
#  in conjunction with Tcl version 8.6
#    Feb 16, 2019 08:24:31 PM CET  platform: Windows NT

from WordRater import RateTokenizedSentence as rate
from NoiseRemoval import noiseRemoval
from nltk import RegexpTokenizer
from langdetect import detect
import time
import pandas
import sys

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True



def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    top = Toplevel1 (root)
    root.mainloop()

w = None
def create_Toplevel1(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = tk.Toplevel (root)
    top = Toplevel1 (w)
    return (w, top)

def destroy_Toplevel1():
    global w
    w.destroy()
    w = None

class Toplevel1:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92' 
        font10 = "-family {Segoe UI} -size 28 -weight bold -slant "  \
            "roman -underline 0 -overstrike 0"
        font13 = "-family {Segoe UI} -size 15 -weight normal -slant "  \
            "italic -underline 0 -overstrike 0"
        font15 = "-family {Segoe UI} -size 18 -weight bold -slant "  \
            "roman -underline 0 -overstrike 0"
        font16 = "-family {Segoe UI} -size 12 -weight normal -slant "  \
            "roman -underline 0 -overstrike 0"
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.configure('.',font="TkDefaultFont")
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        top.geometry("1000x729+429+150")
        top.title("Sentiment Analysis Demo")
        top.configure(background="#ffffff")

        self.Scrolledtext1 = ScrolledText(top)
        self.Scrolledtext1.place(relx=0.02, rely=0.178, relheight=0.143
                , relwidth=0.755)
        self.Scrolledtext1.configure(background="white")
        self.Scrolledtext1.configure(font="TkTextFont")
        self.Scrolledtext1.configure(foreground="black")
        self.Scrolledtext1.configure(highlightbackground="#d9d9d9")
        self.Scrolledtext1.configure(highlightcolor="black")
        self.Scrolledtext1.configure(insertbackground="black")
        self.Scrolledtext1.configure(insertborderwidth="3")
        self.Scrolledtext1.configure(selectbackground="#c4c4c4")
        self.Scrolledtext1.configure(selectforeground="black")
        self.Scrolledtext1.configure(width=10)
        self.Scrolledtext1.configure(wrap='none')

        self.TLabel1 = ttk.Label(top)
        self.TLabel1.place(relx=0.02, rely=0.027, height=64, width=745)
        self.TLabel1.configure(background="#ffffff")
        self.TLabel1.configure(foreground="#000000")
        self.TLabel1.configure(font=font10)
        self.TLabel1.configure(relief='flat')
        self.TLabel1.configure(anchor='center')
        self.TLabel1.configure(text='''Sentiment Analysis: Demo''')
        self.TLabel1.configure(width=745)



        self.Label1 = tk.Label(top)
        self.Label1.place(relx=0.23, rely=0.329, height=56, width=112)
        self.Label1.configure(background="#ffffff")
        self.Label1.configure(disabledforeground="#a3a3a3")
        self.Label1.configure(font=font13)
        self.Label1.configure(foreground="#000000")
        self.Label1.configure(text='''Result''')
        self.Label1.configure(width=112)

        def clicked():
            res = self.Scrolledtext1.get(1.0, "end-1c")

            commentLijst = []
            commentLijst.append(res)

            vertalingsLijst = noiseRemoval(commentLijst)

            tokenizer = RegexpTokenizer(r'\w+')

            for y in range(len(vertalingsLijst)):

                print("\nRating...")
                score2 = rate(vertalingsLijst[y])
                print(vertalingsLijst[y])
                print(score2)

                if score2 > 0:
                    self.Label1.configure(text="Positive")
                    self.Label1.config(fg="green")

                elif score2 is 0:
                    self.Label1.configure(text="Neutral")
                    self.Label1.config(fg="gray")

                else:
                    self.Label1.configure(text="Negative")
                    self.Label1.config(fg="red")

        self.Button1 = tk.Button(top, command=clicked)
        self.Button1.place(relx=0.82, rely=0.206, height=63, width=136)
        self.Button1.configure(activebackground="#ececec")
        self.Button1.configure(activeforeground="#000000")
        self.Button1.configure(background="#d9d9d9")
        self.Button1.configure(disabledforeground="#a3a3a3")
        self.Button1.configure(foreground="#000000")
        self.Button1.configure(highlightbackground="#d9d9d9")
        self.Button1.configure(highlightcolor="black")
        self.Button1.configure(pady="0")
        self.Button1.configure(text='''Analyse''')
        self.Button1.configure(width=136)

        self.Label2 = tk.Label(top)
        self.Label2.place(relx=0.03, rely=0.412, height=56, width=282)
        self.Label2.configure(anchor='w')
        self.Label2.configure(background="#ffffff")
        self.Label2.configure(disabledforeground="#a3a3a3")
        self.Label2.configure(font=font15)
        self.Label2.configure(foreground="#000000")
        self.Label2.configure(text='''Eindresultaten:''')
        self.Label2.configure(width=282)

        self.Label3 = tk.Label(top)
        self.Label3.place(relx=0.03, rely=0.562, height=36, width=142)
        self.Label3.configure(anchor='w')
        self.Label3.configure(background="#ffffff")
        self.Label3.configure(disabledforeground="#a3a3a3")
        self.Label3.configure(font=font16)
        self.Label3.configure(foreground="#000000")
        self.Label3.configure(text='''Totaal aantal''')
        self.Label3.configure(width=142)

        self.Label3_1 = tk.Label(top)
        self.Label3_1.place(relx=0.03, rely=0.617, height=36, width=142)
        self.Label3_1.configure(activebackground="#ffffff")
        self.Label3_1.configure(activeforeground="black")
        self.Label3_1.configure(anchor='w')
        self.Label3_1.configure(background="#ffffff")
        self.Label3_1.configure(disabledforeground="#a3a3a3")
        self.Label3_1.configure(font=font16)
        self.Label3_1.configure(foreground="#000000")
        self.Label3_1.configure(highlightbackground="#d9d9d9")
        self.Label3_1.configure(highlightcolor="black")
        self.Label3_1.configure(text='''Positieve reviews''')

        self.Label3_2 = tk.Label(top)
        self.Label3_2.place(relx=0.03, rely=0.672, height=36, width=162)
        self.Label3_2.configure(activebackground="#ffffff")
        self.Label3_2.configure(activeforeground="black")
        self.Label3_2.configure(anchor='w')
        self.Label3_2.configure(background="#ffffff")
        self.Label3_2.configure(disabledforeground="#a3a3a3")
        self.Label3_2.configure(font=font16)
        self.Label3_2.configure(foreground="#000000")
        self.Label3_2.configure(highlightbackground="#d9d9d9")
        self.Label3_2.configure(highlightcolor="black")
        self.Label3_2.configure(text='''Neutrale reviews''')
        self.Label3_2.configure(width=162)

        self.Label3_3 = tk.Label(top)
        self.Label3_3.place(relx=0.03, rely=0.727, height=36, width=162)
        self.Label3_3.configure(activebackground="#f9f9f9")
        self.Label3_3.configure(activeforeground="black")
        self.Label3_3.configure(anchor='w')
        self.Label3_3.configure(background="#ffffff")
        self.Label3_3.configure(disabledforeground="#a3a3a3")
        self.Label3_3.configure(font=font16)
        self.Label3_3.configure(foreground="#000000")
        self.Label3_3.configure(highlightbackground="#d9d9d9")
        self.Label3_3.configure(highlightcolor="black")
        self.Label3_3.configure(text='''Negatieve reviews''')
        self.Label3_3.configure(width=162)

        self.TSeparator1 = ttk.Separator(top)
        self.TSeparator1.place(relx=0.03, rely=0.562, relwidth=0.97)

        self.TSeparator1_4 = ttk.Separator(top)
        self.TSeparator1_4.place(relx=0.03, rely=0.672, relwidth=0.97)

        self.TSeparator1_5 = ttk.Separator(top)
        self.TSeparator1_5.place(relx=0.03, rely=0.727, relwidth=1.0)

        self.TSeparator1_6 = ttk.Separator(top)
        self.TSeparator1_6.place(relx=0.03, rely=0.782, relwidth=0.97)

        self.TSeparator2 = ttk.Separator(top)
        self.TSeparator2.place(relx=0.2, rely=0.521, relheight=0.261)
        self.TSeparator2.configure(orient="vertical")

        self.TSeparator2_7 = ttk.Separator(top)
        self.TSeparator2_7.place(relx=0.0, rely=0.014, relheight=0.247)
        self.TSeparator2_7.configure(orient="vertical")

        self.TSeparator2_8 = ttk.Separator(top)
        self.TSeparator2_8.place(relx=0.3, rely=0.521, relheight=0.261)
        self.TSeparator2_8.configure(orient="vertical")

        self.TLabel2 = ttk.Label(top)
        self.TLabel2.place(relx=0.21, rely=0.508, height=34, width=87)
        self.TLabel2.configure(background="#ffffff")
        self.TLabel2.configure(foreground="#000000")
        self.TLabel2.configure(font="TkDefaultFont")
        self.TLabel2.configure(relief='flat')
        self.TLabel2.configure(text='''Aantal''')
        self.TLabel2.configure(width=87)

        self.TLabel2_9 = ttk.Label(top)
        self.TLabel2_9.place(relx=0.31, rely=0.508, height=34, width=127)
        self.TLabel2_9.configure(background="#ffffff")
        self.TLabel2_9.configure(foreground="#000000")
        self.TLabel2_9.configure(font="TkDefaultFont")
        self.TLabel2_9.configure(relief='flat')
        self.TLabel2_9.configure(text='''Aantal voorspeld''')
        self.TLabel2_9.configure(width=127)

        self.TSeparator2_9 = ttk.Separator(top)
        self.TSeparator2_9.place(relx=0.44, rely=0.521, relheight=0.261)
        self.TSeparator2_9.configure(orient="vertical")

        self.TLabel2_10 = ttk.Label(top)
        self.TLabel2_10.place(relx=0.45, rely=0.508, height=34, width=147)
        self.TLabel2_10.configure(background="#ffffff")
        self.TLabel2_10.configure(foreground="#000000")
        self.TLabel2_10.configure(font="TkDefaultFont")
        self.TLabel2_10.configure(relief='flat')
        self.TLabel2_10.configure(text='''Aantal juist voorspeld''')
        self.TLabel2_10.configure(width=147)

        self.TSeparator2_10 = ttk.Separator(top)
        self.TSeparator2_10.place(relx=0.6, rely=0.521, relheight=0.261)
        self.TSeparator2_10.configure(orient="vertical")

        self.menubar = tk.Menu(top,font="TkMenuFont",bg=_bgcolor,fg=_fgcolor)
        top.configure(menu = self.menubar)

        self.TLabel2_11 = ttk.Label(top)
        self.TLabel2_11.place(relx=0.61, rely=0.508, height=34, width=77)
        self.TLabel2_11.configure(background="#ffffff")
        self.TLabel2_11.configure(foreground="#000000")
        self.TLabel2_11.configure(font="TkDefaultFont")
        self.TLabel2_11.configure(relief='flat')
        self.TLabel2_11.configure(text='''Aantal FP''')
        self.TLabel2_11.configure(width=77)

        self.TSeparator2_11 = ttk.Separator(top)
        self.TSeparator2_11.place(relx=0.7, rely=0.521, relheight=0.261)
        self.TSeparator2_11.configure(orient="vertical")

        self.TLabel2_12 = ttk.Label(top)
        self.TLabel2_12.place(relx=0.72, rely=0.508, height=34, width=77)
        self.TLabel2_12.configure(background="#ffffff")
        self.TLabel2_12.configure(foreground="#000000")
        self.TLabel2_12.configure(font="TkDefaultFont")
        self.TLabel2_12.configure(relief='flat')
        self.TLabel2_12.configure(text='''Aantal FN''')

        self.TSeparator2_12 = ttk.Separator(top)
        self.TSeparator2_12.place(relx=0.8, rely=0.521, relheight=0.261)
        self.TSeparator2_12.configure(orient="vertical")

        self.TLabel3 = ttk.Label(top)
        self.TLabel3.place(relx=0.84, rely=0.521, height=24, width=109)
        self.TLabel3.configure(background="#ffffff")
        self.TLabel3.configure(foreground="#000000")
        self.TLabel3.configure(font="TkDefaultFont")
        self.TLabel3.configure(relief='flat')
        self.TLabel3.configure(text='''Percentage juist''')

        self.TLabel4 = ttk.Label(top)
        self.TLabel4.place(relx=0.21, rely=0.576, height=24, width=85)
        self.TLabel4.configure(background="#ffffff")
        self.TLabel4.configure(foreground="#000000")
        self.TLabel4.configure(font="TkDefaultFont")
        self.TLabel4.configure(relief='flat')
        self.TLabel4.configure(text='''0''')
        self.TLabel4.configure(width=85)

        self.TLabel4_13 = ttk.Label(top)
        self.TLabel4_13.place(relx=0.21, rely=0.631, height=24, width=85)
        self.TLabel4_13.configure(background="#ffffff")
        self.TLabel4_13.configure(foreground="#000000")
        self.TLabel4_13.configure(font="TkDefaultFont")
        self.TLabel4_13.configure(relief='flat')
        self.TLabel4_13.configure(text='''0''')

        self.TLabel4_14 = ttk.Label(top)
        self.TLabel4_14.place(relx=0.21, rely=0.741, height=24, width=85)
        self.TLabel4_14.configure(background="#ffffff")
        self.TLabel4_14.configure(foreground="#000000")
        self.TLabel4_14.configure(font="TkDefaultFont")
        self.TLabel4_14.configure(relief='flat')
        self.TLabel4_14.configure(text='''0''')

        self.TLabel4_15 = ttk.Label(top)
        self.TLabel4_15.place(relx=0.31, rely=0.576, height=24, width=125)
        self.TLabel4_15.configure(background="#ffffff")
        self.TLabel4_15.configure(foreground="#000000")
        self.TLabel4_15.configure(font="TkDefaultFont")
        self.TLabel4_15.configure(relief='flat')
        self.TLabel4_15.configure(text='''0''')
        self.TLabel4_15.configure(width=125)

        self.TLabel4_16 = ttk.Label(top)
        self.TLabel4_16.place(relx=0.31, rely=0.631, height=24, width=125)
        self.TLabel4_16.configure(background="#ffffff")
        self.TLabel4_16.configure(foreground="#000000")
        self.TLabel4_16.configure(font="TkDefaultFont")
        self.TLabel4_16.configure(relief='flat')
        self.TLabel4_16.configure(text='''0''')

        self.TLabel4_17 = ttk.Label(top)
        self.TLabel4_17.place(relx=0.31, rely=0.741, height=24, width=125)
        self.TLabel4_17.configure(background="#ffffff")
        self.TLabel4_17.configure(foreground="#000000")
        self.TLabel4_17.configure(font="TkDefaultFont")
        self.TLabel4_17.configure(relief='flat')
        self.TLabel4_17.configure(text='''0''')

        self.TLabel4_162 = ttk.Label(top)
        self.TLabel4_162.place(relx=0.45, rely=0.576, height=24, width=145)
        self.TLabel4_162.configure(background="#ffffff")
        self.TLabel4_162.configure(foreground="#000000")
        self.TLabel4_162.configure(font="TkDefaultFont")
        self.TLabel4_162.configure(relief='flat')
        self.TLabel4_162.configure(text='''0''')
        self.TLabel4_162.configure(width=145)

        self.TLabel4_172 = ttk.Label(top)
        self.TLabel4_172.place(relx=0.45, rely=0.631, height=24, width=145)
        self.TLabel4_172.configure(background="#ffffff")
        self.TLabel4_172.configure(foreground="#000000")
        self.TLabel4_172.configure(font="TkDefaultFont")
        self.TLabel4_172.configure(relief='flat')
        self.TLabel4_172.configure(text='''0''')

        self.TLabel4_18 = ttk.Label(top)
        self.TLabel4_18.place(relx=0.45, rely=0.741, height=24, width=145)
        self.TLabel4_18.configure(background="#ffffff")
        self.TLabel4_18.configure(foreground="#000000")
        self.TLabel4_18.configure(font="TkDefaultFont")
        self.TLabel4_18.configure(relief='flat')
        self.TLabel4_18.configure(text='''0''')

        self.TLabel4_19 = ttk.Label(top)
        self.TLabel4_19.place(relx=0.61, rely=0.576, height=24, width=85)
        self.TLabel4_19.configure(background="#ffffff")
        self.TLabel4_19.configure(foreground="#000000")
        self.TLabel4_19.configure(font="TkDefaultFont")
        self.TLabel4_19.configure(relief='flat')
        self.TLabel4_19.configure(text='''0''')
        self.TLabel4_19.configure(width=85)

        self.TLabel4_20 = ttk.Label(top)
        self.TLabel4_20.place(relx=0.61, rely=0.631, height=24, width=85)
        self.TLabel4_20.configure(background="#ffffff")
        self.TLabel4_20.configure(foreground="#000000")
        self.TLabel4_20.configure(font="TkDefaultFont")
        self.TLabel4_20.configure(relief='flat')
        self.TLabel4_20.configure(text='''0''')

        self.TLabel4_21 = ttk.Label(top)
        self.TLabel4_21.place(relx=0.61, rely=0.741, height=24, width=85)
        self.TLabel4_21.configure(background="#ffffff")
        self.TLabel4_21.configure(foreground="#000000")
        self.TLabel4_21.configure(font="TkDefaultFont")
        self.TLabel4_21.configure(relief='flat')
        self.TLabel4_21.configure(text='''0''')

        self.TLabel4_22 = ttk.Label(top)
        self.TLabel4_22.place(relx=0.71, rely=0.576, height=24, width=85)
        self.TLabel4_22.configure(background="#ffffff")
        self.TLabel4_22.configure(foreground="#000000")
        self.TLabel4_22.configure(font="TkDefaultFont")
        self.TLabel4_22.configure(relief='flat')
        self.TLabel4_22.configure(text='''0''')

        self.TLabel4_23 = ttk.Label(top)
        self.TLabel4_23.place(relx=0.71, rely=0.631, height=24, width=85)
        self.TLabel4_23.configure(background="#ffffff")
        self.TLabel4_23.configure(foreground="#000000")
        self.TLabel4_23.configure(font="TkDefaultFont")
        self.TLabel4_23.configure(relief='flat')
        self.TLabel4_23.configure(text='''0''')

        self.TLabel4_24 = ttk.Label(top)
        self.TLabel4_24.place(relx=0.71, rely=0.741, height=24, width=85)
        self.TLabel4_24.configure(background="#ffffff")
        self.TLabel4_24.configure(foreground="#000000")
        self.TLabel4_24.configure(font="TkDefaultFont")
        self.TLabel4_24.configure(relief='flat')
        self.TLabel4_24.configure(text='''0''')

        self.TLabel4_25 = ttk.Label(top)
        self.TLabel4_25.place(relx=0.81, rely=0.576, height=24, width=175)
        self.TLabel4_25.configure(background="#ffffff")
        self.TLabel4_25.configure(foreground="#000000")
        self.TLabel4_25.configure(font="TkDefaultFont")
        self.TLabel4_25.configure(relief='flat')
        self.TLabel4_25.configure(text='''0%''')
        self.TLabel4_25.configure(width=175)

        self.TLabel4_26 = ttk.Label(top)
        self.TLabel4_26.place(relx=0.81, rely=0.631, height=24, width=175)
        self.TLabel4_26.configure(background="#ffffff")
        self.TLabel4_26.configure(foreground="#000000")
        self.TLabel4_26.configure(font="TkDefaultFont")
        self.TLabel4_26.configure(relief='flat')
        self.TLabel4_26.configure(text='''0%''')

        self.TLabel4_27 = ttk.Label(top)
        self.TLabel4_27.place(relx=0.81, rely=0.741, height=24, width=175)
        self.TLabel4_27.configure(background="#ffffff")
        self.TLabel4_27.configure(foreground="#000000")
        self.TLabel4_27.configure(font="TkDefaultFont")
        self.TLabel4_27.configure(relief='flat')
        self.TLabel4_27.configure(text='''0%''')



        self.TSeparator1_28 = ttk.Separator(top)
        self.TSeparator1_28.place(relx=0.03, rely=0.617, relwidth=0.96)

        self.TLabel4_141 = ttk.Label(top)
        self.TLabel4_141.place(relx=0.21, rely=0.686, height=24, width=85)
        self.TLabel4_141.configure(background="#ffffff")
        self.TLabel4_141.configure(foreground="#000000")
        self.TLabel4_141.configure(font="TkDefaultFont")
        self.TLabel4_141.configure(relief='flat')
        self.TLabel4_141.configure(text='''0''')

        self.TLabel4_161 = ttk.Label(top)
        self.TLabel4_161.place(relx=0.31, rely=0.686, height=24, width=125)
        self.TLabel4_161.configure(background="#ffffff")
        self.TLabel4_161.configure(foreground="#000000")
        self.TLabel4_161.configure(font="TkDefaultFont")
        self.TLabel4_161.configure(relief='flat')
        self.TLabel4_161.configure(text='''0''')

        self.TLabel4_181 = ttk.Label(top)
        self.TLabel4_181.place(relx=0.45, rely=0.686, height=24, width=145)
        self.TLabel4_181.configure(background="#ffffff")
        self.TLabel4_181.configure(foreground="#000000")
        self.TLabel4_181.configure(font="TkDefaultFont")
        self.TLabel4_181.configure(relief='flat')
        self.TLabel4_181.configure(text='''0''')

        self.TLabel4_191 = ttk.Label(top)
        self.TLabel4_191.place(relx=0.61, rely=0.686, height=24, width=85)
        self.TLabel4_191.configure(background="#ffffff")
        self.TLabel4_191.configure(foreground="#000000")
        self.TLabel4_191.configure(font="TkDefaultFont")
        self.TLabel4_191.configure(relief='flat')
        self.TLabel4_191.configure(text='''0''')
        self.TLabel4_191.configure(width=85)

        self.TLabel4_201 = ttk.Label(top)
        self.TLabel4_201.place(relx=0.71, rely=0.686, height=24, width=85)
        self.TLabel4_201.configure(background="#ffffff")
        self.TLabel4_201.configure(foreground="#000000")
        self.TLabel4_201.configure(font="TkDefaultFont")
        self.TLabel4_201.configure(relief='flat')
        self.TLabel4_201.configure(text='''0''')

        self.TLabel4_211 = ttk.Label(top)
        self.TLabel4_211.place(relx=0.81, rely=0.686, height=24, width=175)
        self.TLabel4_211.configure(background="#ffffff")
        self.TLabel4_211.configure(foreground="#000000")
        self.TLabel4_211.configure(font="TkDefaultFont")
        self.TLabel4_211.configure(relief='flat')
        self.TLabel4_211.configure(text='''0%''')

        self.Label4 = tk.Label(top)
        self.Label4.place(relx=0.03, rely=0.809, height=26, width=255)
        self.Label4.configure(background="#ffffff")
        self.Label4.configure(disabledforeground="#a3a3a3")
        self.Label4.configure(foreground="#000000")
        self.Label4.configure(text='''Aantal positieve als negatieve gezien:''')

        self.Label5 = tk.Label(top)
        self.Label5.place(relx=0.45, rely=0.809, height=26, width=245)
        self.Label5.configure(background="#ffffff")
        self.Label5.configure(disabledforeground="#a3a3a3")
        self.Label5.configure(foreground="#000000")
        self.Label5.configure(text='''Aantal negatieve als positief gezien:''')

        self.Label6 = tk.Label(top)
        self.Label6.place(relx=0.81, rely=0.809, height=26, width=184)
        self.Label6.configure(background="#ffffff")
        self.Label6.configure(disabledforeground="#a3a3a3")
        self.Label6.configure(foreground="#000000")
        self.Label6.configure(text='''Tijd:''')

        self.Label7 = tk.Label(top)
        self.Label7.place(relx=0.5, rely=0.439, height=26, width=108)
        self.Label7.configure(background="#ffffff")
        self.Label7.configure(disabledforeground="#a3a3a3")
        self.Label7.configure(foreground="#000000")
        self.Label7.configure(text='''Neutral Range:''')

        self.Entry1 = tk.Entry(top)
        self.Entry1.place(relx=0.61, rely=0.439, height=24, relwidth=0.054)
        self.Entry1.configure(background="white")
        self.Entry1.configure(disabledforeground="#a3a3a3")
        self.Entry1.configure(font="TkFixedFont")
        self.Entry1.configure(foreground="#000000")
        self.Entry1.configure(insertbackground="black")
        self.Entry1.configure(width=54)
        self.Entry1.insert(0,"0")

        def clicked2():
            class Comment(object):

                def __init__(self, id , text, sentiment, training ):
                    self.id = id
                    self.text = text
                    self.sentiment = sentiment
                    self.training = training

            start = time.time()

            res = self.Entry1.get()

            min = int(res)*-1
            max = int(res)
            print(str(min) + " - dit is de min, "+str(max)+" - dit is de max")

            # Excel stuff
            df = pandas.read_excel('CommentsPerLanguage.xlsx')
            df_id = df["id"]
            df_text = df["text"]
            df_sentiment = df["sentiment"]
            df_training = df["training"]
            # df_lang = df["taal"]

            # Lijsten om tekst bij te houden en de comment zelf
            commentlijst = []
            comments = []

            # Analyse stuff
            aantalComments = 0
            aantalPos = 0
            aantalNeg = 0
            aantalNeu = 0

            aantalPosVoorspeld = 0
            aantalNegVoorspeld = 0
            aantalNeuVoorspeld = 0

            aantalFPPos = 0
            aantalFPNeg = 0
            aantalFPNeu = 0

            aantalFNPos = 0
            aantalFNNeg = 0
            aantalFNNeu = 0

            aantalPosJuist = 0
            aantalNegJuist = 0
            aantalNeuJuist = 0

            aantalPosNegVoorspeld = 0
            aantalNegPosVoorspeld = 0

            for x in range(df_id.size):
                c = Comment(df_id.get(x), df_text.get(x), df_sentiment.get(x), df_training.get(x))
                commentlijst.append(c.text)
                comments.append(c)

            vertalingsLijst = noiseRemoval(commentlijst)

            for y in range(len(vertalingsLijst)):

                score = rate(vertalingsLijst[y])

                # Analyse

                if comments[y].training == "TE":

                    aantalComments += 1

                    if score > max:
                        aantalPosVoorspeld += 1
                        if comments[y].sentiment > 0:
                            aantalPos += 1
                            aantalPosJuist += 1
                        if comments[y].sentiment == 0:
                            aantalNeu += 1
                            aantalFPPos += 1
                            aantalFNNeu += 1
                        if comments[y].sentiment < 0:
                            aantalNeg += 1
                            aantalFPPos += 1
                            aantalFNNeg += 1
                            aantalNegPosVoorspeld += 1

                    if max >= score >= min:
                        aantalNeuVoorspeld += 1
                        if comments[y].sentiment > 0:
                            aantalPos += 1
                            aantalFNPos += 1
                            aantalFPNeu += 1
                        if comments[y].sentiment == 0:
                            aantalNeu += 1
                            aantalNeuJuist += 1
                        if comments[y].sentiment < 0:
                            aantalNeg += 1
                            aantalFPNeu += 1
                            aantalFNNeg += 1

                    if score < min:
                        aantalNegVoorspeld += 1
                        if comments[y].sentiment > 0:
                            aantalPos += 1
                            aantalFNPos += 1
                            aantalFPNeg += 1
                            aantalPosNegVoorspeld += 1
                        if comments[y].sentiment == 0:
                            aantalNeu += 1
                            aantalFNNeu += 1
                            aantalFPNeg += 1
                        if comments[y].sentiment < 0:
                            aantalNeg += 1
                            aantalNegJuist += 1

            self.TLabel4.configure(text=str(aantalComments))
            self.TLabel4_13.configure(text=str(aantalPos))
            self.TLabel4_141.configure(text=str(aantalNeu))
            self.TLabel4_14.configure(text=str(aantalNeg))

            self.TLabel4_15.configure(text=str(aantalPosVoorspeld + aantalNegVoorspeld + aantalNeuVoorspeld))
            self.TLabel4_16.configure(text=str(aantalPosVoorspeld))
            self.TLabel4_161.configure(text=str(aantalNeuVoorspeld))
            self.TLabel4_17.configure(text=str(aantalNegVoorspeld))

            self.TLabel4_162.configure(text=str(aantalPosJuist + aantalNeuJuist + aantalNegJuist))
            self.TLabel4_172.configure(text=str(aantalPosJuist))
            self.TLabel4_181.configure(text=str(aantalNeuJuist))
            self.TLabel4_18.configure(text=str(aantalNegJuist))

            self.TLabel4_19.configure(text=str(aantalFPPos + aantalFPNeu + aantalFPNeg))
            self.TLabel4_20.configure(text=str(aantalFPPos))
            self.TLabel4_191.configure(text=str(aantalFPNeu))
            self.TLabel4_21.configure(text=str(aantalFPNeg))

            self.TLabel4_22.configure(text=str(aantalFNPos + aantalFNNeu + aantalFNNeg))
            self.TLabel4_23.configure(text=str(aantalFNPos))
            self.TLabel4_201.configure(text=str(aantalFNNeu))
            self.TLabel4_24.configure(text=str(aantalFNNeg))

            self.TLabel4_25.configure(text=str(round((100*(aantalPosJuist + aantalNeuJuist + aantalNegJuist) / (aantalComments)),2))+' %')
            self.TLabel4_26.configure(text=str(round((100 * aantalPosJuist / aantalPosVoorspeld),2))+' %')
            self.TLabel4_211.configure(text=str(round((100 * aantalNeuJuist / aantalNeuVoorspeld), 2))+' %')
            self.TLabel4_27.configure(text=str(round((100 * aantalNegJuist / aantalNegVoorspeld), 2))+' %')

            self.Label4.configure(text='Aantal positieve als negatieve gezien: '+str(aantalPosNegVoorspeld))
            self.Label5.configure(text='Aantal negatieve als positief gezien: '+str(aantalNegPosVoorspeld))

            done = time.time()
            elapsed = done - start

            self.Label6.configure(text='Tijd: '+str(round(elapsed, 2))+'s')



        self.Button2 = tk.Button(top, command=clicked2)
        self.Button2.place(relx=0.28, rely=0.425, height=43, width=156)
        self.Button2.configure(activebackground="#ececec")
        self.Button2.configure(activeforeground="#000000")
        self.Button2.configure(background="#d9d9d9")
        self.Button2.configure(disabledforeground="#a3a3a3")
        self.Button2.configure(foreground="#000000")
        self.Button2.configure(highlightbackground="#d9d9d9")
        self.Button2.configure(highlightcolor="black")
        self.Button2.configure(pady="0")
        self.Button2.configure(text='''Analyse all comments''')
        self.Button2.configure(width=156)

# The following code is added to facilitate the Scrolled widgets you specified.
class AutoScroll(object):
    '''Configure the scrollbars for a widget.'''

    def __init__(self, master):
        #  Rozen. Added the try-except clauses so that this class
        #  could be used for scrolled entry widget for which vertical
        #  scrolling is not supported. 5/7/14.
        try:
            vsb = ttk.Scrollbar(master, orient='vertical', command=self.yview)
        except:
            pass
        hsb = ttk.Scrollbar(master, orient='horizontal', command=self.xview)

        #self.configure(yscrollcommand=_autoscroll(vsb),
        #    xscrollcommand=_autoscroll(hsb))
        try:
            self.configure(yscrollcommand=self._autoscroll(vsb))
        except:
            pass
        self.configure(xscrollcommand=self._autoscroll(hsb))

        self.grid(column=0, row=0, sticky='nsew')
        try:
            vsb.grid(column=1, row=0, sticky='ns')
        except:
            pass
        hsb.grid(column=0, row=1, sticky='ew')

        master.grid_columnconfigure(0, weight=1)
        master.grid_rowconfigure(0, weight=1)

        # Copy geometry methods of master  (taken from ScrolledText.py)
        if py3:
            methods = tk.Pack.__dict__.keys() | tk.Grid.__dict__.keys() \
                  | tk.Place.__dict__.keys()
        else:
            methods = tk.Pack.__dict__.keys() + tk.Grid.__dict__.keys() \
                  + tk.Place.__dict__.keys()

        for meth in methods:
            if meth[0] != '_' and meth not in ('config', 'configure'):
                setattr(self, meth, getattr(master, meth))

    @staticmethod
    def _autoscroll(sbar):
        '''Hide and show scrollbar as needed.'''
        def wrapped(first, last):
            first, last = float(first), float(last)
            if first <= 0 and last >= 1:
                sbar.grid_remove()
            else:
                sbar.grid()
            sbar.set(first, last)
        return wrapped

    def __str__(self):
        return str(self.master)

def _create_container(func):
    '''Creates a ttk Frame with a given master, and use this new frame to
    place the scrollbars and the widget.'''
    def wrapped(cls, master, **kw):
        container = ttk.Frame(master)
        container.bind('<Enter>', lambda e: _bound_to_mousewheel(e, container))
        container.bind('<Leave>', lambda e: _unbound_to_mousewheel(e, container))
        return func(cls, container, **kw)
    return wrapped

class ScrolledText(AutoScroll, tk.Text):
    '''A standard Tkinter Text widget with scrollbars that will
    automatically show/hide as needed.'''
    @_create_container
    def __init__(self, master, **kw):
        tk.Text.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)

import platform
def _bound_to_mousewheel(event, widget):
    child = widget.winfo_children()[0]
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        child.bind_all('<MouseWheel>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-MouseWheel>', lambda e: _on_shiftmouse(e, child))
    else:
        child.bind_all('<Button-4>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Button-5>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-Button-4>', lambda e: _on_shiftmouse(e, child))
        child.bind_all('<Shift-Button-5>', lambda e: _on_shiftmouse(e, child))

def _unbound_to_mousewheel(event, widget):
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        widget.unbind_all('<MouseWheel>')
        widget.unbind_all('<Shift-MouseWheel>')
    else:
        widget.unbind_all('<Button-4>')
        widget.unbind_all('<Button-5>')
        widget.unbind_all('<Shift-Button-4>')
        widget.unbind_all('<Shift-Button-5>')

def _on_mousewheel(event, widget):
    if platform.system() == 'Windows':
        widget.yview_scroll(-1*int(event.delta/120),'units')
    elif platform.system() == 'Darwin':
        widget.yview_scroll(-1*int(event.delta),'units')
    else:
        if event.num == 4:
            widget.yview_scroll(-1, 'units')
        elif event.num == 5:
            widget.yview_scroll(1, 'units')

def _on_shiftmouse(event, widget):
    if platform.system() == 'Windows':
        widget.xview_scroll(-1*int(event.delta/120), 'units')
    elif platform.system() == 'Darwin':
        widget.xview_scroll(-1*int(event.delta), 'units')
    else:
        if event.num == 4:
            widget.xview_scroll(-1, 'units')
        elif event.num == 5:
            widget.xview_scroll(1, 'units')

if __name__ == '__main__':
    vp_start_gui()





